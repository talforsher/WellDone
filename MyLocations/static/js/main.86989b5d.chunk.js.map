{"version":3,"sources":["logo.svg","App.jsx","serviceWorker.js","index.jsx"],"names":["module","exports","__webpack_require__","p","s1","background","s2","Header","_ref","title","react_default","a","createElement","Main","_ref2","Footer","_ref3","style","atl","id","fa","logoStyle","position","opacity","pointerEvents","mapStyles","width","height","margin","MapContainer","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","_this$props","props","header","main","footer","className","App_Header","App_Main","App_Footer","dist","google","zoom","disableDefaultUI","initialCenter","lat","lng","alt","src","logo","Component","GoogleApiWrapper","apiKey","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.86989b5d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.9228058c.svg\";","import React, { Component } from 'react';\nimport { Map, GoogleApiWrapper } from 'google-maps-react';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport { createStore } from 'redux';\nimport logo from './logo.svg';\nimport './App.scss';\nimport { FaMap, FaThumbtack } from 'react-icons/fa';\n\n\nconst s1 = {\nbackground: '#ff7800'\n}\n\nconst s2 = {\nbackground: '#e3f0ec'\n}\n\nconst Header = ({title}) => (<header>{title}</header>);\n\nconst Main = ({title}) => (<main>{title}</main>);\n\nconst Footer = ({title}) => (<footer><div>\n    <span style={s1} atl={\"locations\"} id={\"locs\"} ><FaThumbtack/>Locs</span>\n  <span style={s2} atl={\"categories\"} id={\"cats\"}><FaMap/>Cats</span>\n  </div></footer>);\n\nconst logoStyle = {\nposition: 'fixed',\nopacity: '0.2',\npointerEvents: 'none'\n}\n\nconst mapStyles = {\nwidth: '70%',\nheight: '60%',\nmargin: 'auto'\n};\n\nexport class MapContainer extends Component {\n\nrender() {\n\nconst {header,main,footer} = this.props;\n\nreturn (\n<div className=\"app\">\n<Header title={header} />\n<Main title={main} />\n<Footer title={footer}/>\n  <Map\n  google={this.props.google}\n  zoom={14}\n  style={mapStyles}\n  disableDefaultUI={true}\n  initialCenter={{\n  lat: 31.9501994,\n  lng: 34.8027138\n  }}\n  />\n  <img\n  alt=\"MyLocations Logo\"\n  src={logo}\n  style={logoStyle} />\n</div>\n);\n}\n}\nexport default GoogleApiWrapper({\napiKey: 'AIzaSyAKTHm7M5ADSMkqnfNuoSqbzTmb5iwretQ'\n})(MapContainer);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n<App\n\theader=\"MyLocations\"\n\tmain=\"Map\"\n\tfooter\n\t/>,\n\tdocument.getElementById('react')\n\t);\n\t// If you want your app to work offline and load faster, you can change\n\t// unregister() to register() below. Note this comes with some pitfalls.\n\t// Learn more about service workers: http://bit.ly/CRA-PWA\n\tserviceWorker.register();"],"sourceRoot":""}